nil
---
nil

[1 "a" {2 "b"}]
---
[
    1.0e+00
    "a"
    {
        2.0e+00
        "b"
    }
]

(def a 1)
a
---
1.0e+00

(def both (fn [a b] [a b]))
(both "a" "b")
---
[
    "a"
    "b"
]

(def both (fn [a b] [a b]))
(def a "c")
(both "a" b)
---
#
    "error"
    #
        "undefined"
        "b"

(def neither (fn [a b]))
(def both (fn [a b] [a b]))
(def a "c")
(def ??? (if true both neither))
(??? "a" "b")
---
[
    "a"
    "b"
]

(def neither (fn [a b]))
(def both (fn [a b] [a b]))
(def a "c")
(def ??? (if false both neither))
(??? "a" "b")
---
nil

(def foo (fn [a]
  (def b a)
  b))
(def b "b")
[(foo "a") b]
---
[
    "a"
    "b"
]

(get {"a" 1 "b" 2 "c" 3} "a")
---
1.0e+00

(get {"a" 1 "b" 2 "c" 3} "b")
---
2.0e+00

(get {"a" 1 "b" 2 "c" 3} "c")
---
3.0e+00

(put {} "a" 1)
---
{
    "a"
    1.0e+00
}

(put (put {} "a" 1) "a" 2)
---
{
    "a"
    2.0e+00
}

(get (put (put {} "a" 1) "a" 2) "a")
---
2.0e+00

#
    "foo"
    "foo"
---
#
    "foo"
    "foo"

(put {} #"foo" "foo" #"bar" "bar")
---
{
    #
        "foo"
        "foo"
    #
        "bar"
        "bar"
}

(get {})
---
#
    "error"
    #
        "wrong number of args"
        {
            "found"
            2.0e+00
            "expected"
            1.0e+00
        }

(get {} "a" "b")
---
#
    "error"
    #
        "wrong number of args"
        {
            "found"
            2.0e+00
            "expected"
            3.0e+00
        }

(put {} "a")
---
#
    "error"
    #
        "wrong number of args"
        {
            "found"
            3.0e+00
            "expected"
            2.0e+00
        }

(put {} "a" "b" "c")
---
#
    "error"
    #
        "wrong number of args"
        {
            "found"
            3.0e+00
            "expected"
            4.0e+00
        }

[1 3.14 -0.4 -0. {"foo" "ba\"r"}]
---
[
    1.0e+00
    3.14e+00
    -4.0e-01
    -0.0e+00
    {
        "foo"
        "ba\"r"
    }
]

[1 (get {2 1} 2]
---
[
    1.0e+00
    #
        "error"
        #
            "unexpected token"
            {
                "found"
                "close_list"
                "expected"
                "close_vec"
            }
]

["foo""bar"]
---
[
    #
        "error"
        #
            "tokenizer error"
            nil
]

[1 2
---
[
    1.0e+00
    2.0e+00
    #
        "error"
        #
            "unexpected token"
            {
                "found"
                "close_vec"
                "expected"
                "eof"
            }
]

[#"foo" "bar" "quux"]
---
[
    #
        "foo"
        "bar"
    "quux"
]

(get {} (get {} "b"))
---
#
    "error"
    #
        "not found"
        "b"

(= 1 1)
---
true

(= 1 2)
---
false

(= "foo" "foo")
---
true

(= "foo" "bar")
---
false

(= nil [])
---
false

(= [1 2] [1 2])
---
true

(= [1 2 3] [1 2])
---
false

(= {"a" 1 "b" 2} {"b" 2 "a" 1})
---
true

(= {"a" 1 "b" 2} {"b" 1 "a" 2})
---
false

(= {"a" 1 "b" 2} {"a" 1})
---
false

(= [] {})
---
false

(+ 1 "foo")
---
#
    "error"
    #
        "non-number passed to +"
        "foo"

(+ 2 3)
---
5.0e+00

(- 2 3)
---
-1.0e+00

(* 2 3)
---
6.0e+00

(/ 2 3)
---
6.666666666666666e-01

(/ 1 0)
---
#
    "error"
    #
        "division by 0"
        nil

(get-meta "foo")
---
{
    "start token ix"
    3.0e+00
    "end token ix"
    4.0e+00
}

(put-meta "foo" 42)
---
#
    "error"
    #
        "non-map passed to put-meta"
        4.2e+01

(put-meta "foo" {"test" 42})
---
"foo"

(get-meta (put-meta "foo" {"test" 42}))
---
{
    "test"
    4.2e+01
}

(def foo {"a" ["b" "c"]})
(get-meta (get (get foo "a") 1))
---
{
    "origin"
    [
        foo
        "a"
        1.0e+00
    ]
    "start token ix"
    1.1e+01
    "end token ix"
    1.2e+01
}

(def bar ["b" "c"])
(def foo {"a" bar})
(get-meta (get (get foo "a") 1))
---
{
    "origin"
    [
        bar
        1.0e+00
    ]
    "start token ix"
    8.0e+00
    "end token ix"
    9.0e+00
}

(def bar ["b" "c"])
(def foo {"a" (if true bar bar)})
(get-meta (get (get foo "a") 1))
---
{
    "origin"
    [
        bar
        1.0e+00
    ]
    "start token ix"
    8.0e+00
    "end token ix"
    9.0e+00
}

(def bar (if true ["b" "c"] ["b" "c"]))
(def foo {"a" bar})
(get-meta (get (get foo "a") 1))
---
{
    "start token ix"
    1.3e+01
    "end token ix"
    1.4e+01
}

(def foo {"a" (= 1 1)})
(get-meta (get foo "a"))
---
{
    "origin"
    [
        foo
        "a"
    ]
}

(put [] 0 "a")
---
[
    "a"
]

(put ["a"] 0 "b")
---
[
    "a"
]

(put ["a"] 1 "b")
---
[
    "a"
    "b"
]

(put ["a"] 2 "b")
---
#
    "error"
    #
        "key is past end of vec"
        2.0e+00

(put ["a"] -1 "b")
---
#
    "error"
    #
        "cannot put this key in a vec"
        -1.0e+00

(put ["a"] 0.5 "b")
---
#
    "error"
    #
        "cannot put this key in a vec"
        5.0e-01

(count [])
---
0.0e+00

(count ["a" "b" "c"])
---
3.0e+00

(count {})
---
0.0e+00

(count {"a" 1 "b" 2})
---
2.0e+00

(count "foo")
---
#
    "error"
    #
        "cannot count"
        "foo"

// TODO
{"a" 1 "a" 2}
---
{
    "a"
    1.0e+00
    "a"
    2.0e+00
}